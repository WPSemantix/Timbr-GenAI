from langgraph.graph import Graph, StateGraph
from langchain_openai import ChatOpenAI

from langchain_timbr import (
    IdentifyConceptNode,
    GenerateTimbrSqlNode,
    ValidateSemanticSqlNode,
    ExecuteSemanticQueryNode,
    GenerateResponseNode,
)

llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0,
    openai_api_key="open-ai-api-key",
)

identify_node = IdentifyConceptNode(
    llm=llm,
    url="https://your-timbr-app.com/",
    token="tk_XXXXXXXXXXXXXXXXXXXXXXXX",
    ontology="timbr_knowledge_graph",
    concepts_list=["Sales", "Orders"],
    views_list=["sales_view"],
)

generate_sql_node = GenerateTimbrSqlNode(
    llm=llm,
    url="https://your-timbr-app.com/",
    token="tk_XXXXXXXXXXXXXXXXXXXXXXXX",
    ontology="timbr_knowledge_graph",
)

validate_sql_node = ValidateSemanticSqlNode(
    llm=llm,
    url="https://your-timbr-app.com/",
    token="tk_XXXXXXXXXXXXXXXXXXXXXXXX",
    ontology="timbr_knowledge_graph",
    retries=4,
)

execute_query_node = ExecuteSemanticQueryNode(
    llm=llm,
    url="https://your-timbr-app.com/",
    token="tk_XXXXXXXXXXXXXXXXXXXXXXXX",
    ontology="timbr_knowledge_graph",
)

generate_response_node = GenerateResponseNode(
    response_template="The SQL query:\n{sql}\n\nusing {schema}.{concept} returned:\n{rows}"
)

# Create a LangGraph and add the nodes
graph = Graph()

graph.add_node("identify", identify_node)
graph.add_node("generate", generate_sql_node)
graph.add_node("validate", validate_sql_node)
graph.add_node("execute", execute_query_node)
graph.add_node("response", generate_response_node)

# Connect the nodes sequentially.
# Each edge passes the current state (which includes output keys) to the next node.
graph.add_edge("identify", "generate")
graph.add_edge("generate", "validate")
graph.add_edge("validate", "execute")
graph.add_edge("execute", "response")

# Create the initial state with the user prompt
state = StateGraph()
state.messages = [{"content": "What are the total sales for last month?"}]

# Run the graph pipeline
result_state = graph.run(state)

# Print the final response generated by the response node
print("Final Response:")
print(result_state.get("response"))
